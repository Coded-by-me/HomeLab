buildscript {
    ext {
        protobufVersion = '3.25.1'
        protobufPluginVersion = '0.8.14'
        grpcVersion = '1.58.1'
    }
}

plugins {
    id 'com.google.cloud.tools.jib' version '3.4.3'
    id 'com.google.protobuf' version '0.9.4'
}

dependencies {
    implementation project(":domain-module")
    implementation project(":common-module")

    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Rabbit MQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-security:2.5.4'

    // Elastic Search
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // gRPC
    implementation "com.google.protobuf:protobuf-java-util:3.25.1"
    implementation 'com.google.protobuf:protobuf-java:3.25.1'
    implementation 'net.devh:grpc-client-spring-boot-starter:2.15.0.RELEASE'
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc{}
        }
    }
}

jib{
    from {
        image = 'amazoncorretto:17'
        platforms {
//          ARM64 : Mac OS
//			AMD64 : Windows & Linux
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
			platform {
				architecture = 'arm64'
				os = 'linux'
			}
        }
    }
    to {
        image = 'docker.io/ghkd110/server'
        tags = ['latest', 'test']
        auth {
            username = findProperty('jib.to.auth.username') ?: " " as Property<String>
            password = findProperty('jib.to.auth.password') ?: " " as Property<String>

            if (username == " " || password == " ") {
                logger.warn("gradle.properties 파일이 있는지 확인")
            }
        }
    }
    container {
        jvmFlags = ['-Xms512m', '-Xdebug']
        ports = ['8000']
        environment = [
                'SPRING_PROFILES_ACTIVE': 'prod',
                'NORMAL_PROP': 'NORMAL',
                'DIRECT_MSG': 'Hello!',
                'USE_PROFILE': 'prod'
        ]
        mainClass = 'hhs.server.api.ApiApplication'
//        format='OCI'
        creationTime='USE_CURRENT_TIMESTAMP'
        entrypoint=[
                'java',
                '-Dspring.profiles.active=prod',
                '-Dnormal.prop=${NORM_PROP}',
                '-Dconfig.healthmsg=${DIRECT_MSG}',
                '-cp',
                '/app/resources:/app/classes:/app/libs/*',
                'hhs.server.api.ApiApplication'
        ]
    }
}