plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.google.cloud.tools.jib' version '3.4.2'
}

group = 'hhs.server'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Email
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//Json
	implementation 'org.springframework.boot:spring-boot-starter-json'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// Prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'io.micrometer:micrometer-core'

	// Rabbit MQ
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	//
}

tasks.named('test') {
	useJUnitPlatform()
}

jib{
	from {
		image = 'amazoncorretto:17'
		platforms {
//          ARM64 : Mac OS
//			AMD64 : Windows & Linux
			platform {
				architecture = 'amd64'
				os = 'linux'
			}
//			platform {
//				architecture = 'arm64'
//				os = 'linux'
//			}
		}
	}
	to {
		image = 'docker.io/ghkd110/server'
		tags = ['latest']
		auth {
			username = findProperty('jib.to.auth.username') ?: " "
			password = findProperty('jib.to.auth.password') ?: " "

			if (username == " " || password == " ") {
				logger.warn("gradle.properties 파일이 있는지 확인")
			}
		}
	}
	container {
		jvmFlags = ['-Xms512m', '-Xdebug']
		ports = ['8000']
		environment = [
				'SPRING_PROFILES_ACTIVE': 'prod',
				'NORMAL_PROP': 'NORMAL',
				'DIRECT_MSG': 'Hello!',
				'USE_PROFILE': 'default'
		]
		mainClass = 'hhs.server.home_server.HomeServerApplication'
        format='OCI'
		creationTime='USE_CURRENT_TIMESTAMP'
		entrypoint=[
				'java',
				'-Dspring.profiles.active=${USE_PROFILE}',
				'-Dnormal.prop=${NORM_PROP}',
				'-Dconfig.healthmsg=${DIRECT_MSG}',
				'-cp',
				'/app/resources:/app/classes:/app/libs/*',
				'hhs.server.home_server.HomeServerApplication'
		]
	}
}